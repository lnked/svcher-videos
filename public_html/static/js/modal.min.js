var Modal = (function(w, d, b) {
    var settings = {
        close: '.j-close-modal',
        trigger: '.j-open-modal',
        timeout: 400
    };

    function _clean(s) {
        if (s.substr(0, 1) == '#') {
            s = s.substr(1);
        }

        return s;
    }

    function _render(t) {
        var div = document.createElement('div');
        div.innerHTML = t.trim();
        return div.firstChild;
    }

    function _callback(c) {
        if (typeof c === 'function') {
            c.call(null);
        }
    }

    function _valid(s) {
        if (d.getElementById(s)) {
            return s;
        }

        if (d.getElementById(`tpl-${s}`)) {
            return `tpl-${s}`;
        }

        if (d.getElementById(`tmpl-${s}`)) {
            return `tmpl-${s}`;
        }

        return false;
    }

    function _close(modal, callback, remove) {
        modal.classList.remove('is-animated');
        modal.classList.remove('is-open');
        b.classList.remove("modal-open");

        setTimeout(function() {
            modal.classList.add('is-hidden');

            if (remove) {
                modal.parentNode.removeChild(modal);
            }

            $('body').trigger('modal.close');

            _callback(callback);
        }, settings.timeout);
    }

    function _show(modal) {
        modal.classList.remove('is-hidden');
        b.classList.add("modal-open");

        setTimeout(function() {
            modal.classList.add('is-animated');
            modal.classList.add('is-open');
        }, 16);

        _focus(modal);
    }

    function _focus(modal) {
        modal.focus();

        var button = d.createElement('button');

        button.style =
            'position:absolute;width:1px;height:1px;opacity:0;right:0px;bottom:0px;background-color:#f00;outline:0;';

        modal.appendChild(button);

        button.onfocus = function() {
            modal.focus();
        };
    }

    return {
        hooks: function() {
            var _this = this;
            w.onkeydown = function (e) {
                if ((e.which || e.keyCode) == 27) {
                    _this.close(d.querySelectorAll('.modal.is-open'));
                }
            };
        },

        open: function(target) {
            var selector = '';

            if (target.getAttribute('href')) {
                selector = _clean(target.getAttribute('href'));
            }

            if (target.dataset.modal) {
                selector = _clean(target.dataset.modal);
            }

            if ((selector = _valid(selector))) {
                this.show(selector);
            }
        },

        close: function(element, callback) {
            if (element.length) {
            	for (var i = element.length - 1; i >= 0; i--) {
                    _close(element[i], callback, true);
                }
            } else if (
                typeof element.dataset !== 'undefined' &&
                element.dataset.target
            ) {
                _close(d.querySelector(element.dataset.target), callback, true);
            } else {
            	 _callback(callback);
            }
        },

        bind: function(modal) {
            var close = modal.querySelectorAll(settings.close);
            var _this = this;

            if (close.length) {
                for (var i = close.length - 1; i >= 0; i--) {
                    close[i].addEventListener('click', function(e) {
                        e.preventDefault();
                        _this.close(e.target);
                    });
                }
            }
        },

        show: function(selector, data) {
            if (typeof (data) === 'undefined') {
                data = {}
            }

            var modal = _render(template(selector, data));

            this.bind(modal);

            var _this = this;

            _this.close(d.querySelectorAll('.modal.is-open'), function() {
                modal.classList.add('is-temp');

                modal.setAttribute('aria-hidden', false);

                b.appendChild(modal);

                _show(modal);
            });
        },

        events: function() {
            var selectors = d.querySelectorAll(settings.trigger);
            var _this = this;

            if (selectors.length) {
                for (var i = selectors.length - 1; i >= 0; i--) {
                    selectors[i].addEventListener('click', function(e) {
                        e.preventDefault();
                        _this.open(e.target);
                        return false;
                    });
                }
            }
        },

        init: function(options) {
            if (typeof options !== 'undefined') {
                for (var x in options) {
                    if (typeof settings[x] !== 'undefined') {
                        settings[x] = options[x];
                    }
                }
            }

            this.events();
            this.hooks();
        }
    };
}(window, document, document.body));
